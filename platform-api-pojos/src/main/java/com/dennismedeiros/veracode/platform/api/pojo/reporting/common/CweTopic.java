//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.30 at 11:12:48 AM EDT 
//


package com.dennismedeiros.veracode.platform.api.pojo.reporting.common;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import com.dennismedeiros.veracode.platform.api.pojo.analyses.dast.DynamicAnalysisFlawFind;
import com.dennismedeiros.veracode.platform.api.pojo.analyses.dast.DynamicAnalysisFlawFinding;
import com.dennismedeiros.veracode.platform.api.pojo.analyses.mast.ManualAnalysisFlawFind;
import com.dennismedeiros.veracode.platform.api.pojo.analyses.mast.ManualAnalysisFlawFinding;
import com.dennismedeiros.veracode.platform.api.pojo.analyses.sast.StaticAnalysisFlaw;
import com.dennismedeiros.veracode.platform.api.pojo.analyses.sast.StaticAnalysisFlawFinding;

/**
 * Class representing an instance of a CWE Category 
 * @author Dennis Medeiros
 *
 */
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(propOrder = {
    "description",
    "staticflaws",
    "dynamicflaws",
    "manualflaws"
})
@XmlRootElement(name = "cwe")
public class CweTopic implements CweCategory{

    @XmlElement(required = true, type=CweTopic.Description.class)
    protected CweCategory.CweDescription description;
   
    @XmlElementWrapper(name="staticflaws")
    @XmlElement(name="flaw", type=StaticAnalysisFlawFinding.class)
    protected List<StaticAnalysisFlaw> staticflaws;
       
    @XmlElementWrapper(name="dynamicflaws")
    @XmlElement(name="flaw", type=DynamicAnalysisFlawFinding.class)
    protected List<DynamicAnalysisFlawFind> dynamicflaws;
    
    @XmlElementWrapper(name="manualflaws")
    @XmlElement(name="flaw", type=ManualAnalysisFlawFinding.class)
    protected List<ManualAnalysisFlawFind> manualflaws;
    
    @XmlAttribute(name = "cweid", required = true)
    @XmlSchemaType(name = "positiveInteger")
    protected Integer cweid;
    @XmlAttribute(name = "cwename", required = true)
    protected String cwename;
    @XmlAttribute(name = "pcirelated")
    protected Boolean pcirelated;
    @XmlAttribute(name = "owasp")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger owasp;
    @XmlAttribute(name = "sans")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger sans;
    @XmlAttribute(name = "certc")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger certc;
    @XmlAttribute(name = "certcpp")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger certcpp;
    @XmlAttribute(name = "certjava")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger certjava;


	/* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getId()
	 */
	@Override
	public Integer getId() {
		return cweid;
		
	}

	/* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getName()
	 */
	@Override
	public String getName() {
	    return cwename;
	}


    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getDescription()
	 */
    @Override
	public String getDescription() {
        return description.toString();
    }

   /* (non-Javadoc)
 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#isPcirelated()
 */
    @Override
	public Boolean isPcirelated() {
        return pcirelated;
    }

    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getOwasp()
	 */
    @Override
	public BigInteger getOwasp() {
        return owasp;
    }

    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getSans()
	 */
    @Override
	public BigInteger getSans() {
        return sans;
    }

    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getCertc()
	 */
    @Override
	public BigInteger getCertc() {
        return certc;
    }

    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getCertcpp()
	 */
    @Override
	public BigInteger getCertcpp() {
        return certcpp;
    }

    /* (non-Javadoc)
	 * @see com.veracode.platform.parsers.jaxb.templates.detailedreport.ICweType#getCertjava()
	 */
    @Override
	public BigInteger getCertjava() {
        return certjava;
    }
    
    @XmlAccessorType(XmlAccessType.NONE)
    @XmlType(name = "", propOrder = {
        "text"
    })
    public static class Description implements CweCategory.CweDescription {
    	
    	@XmlElement(type=CweTopic.Description.Text.class)
    	protected List<CweCategory.CweDescription.IText> text;

        public List<CweCategory.CweDescription.IText> getText() {
            if (text == null) {
                text = new ArrayList<CweCategory.CweDescription.IText>();
            }
            return this.text;
        }

        @XmlAccessorType(XmlAccessType.NONE)
        @XmlType(name = "")
        public static class Text implements CweCategory.CweDescription.IText {

            @XmlAttribute(name = "text", required = true)
            protected String text;

            public String getText() {
                return text;
            }

            public void setText(String value) {
                this.text = value;
            }
            
        }
    }

	@Override
	public List<StaticAnalysisFlaw> getStaticAnalysisFlaws() {
		if(this.staticflaws == null) {
			this.staticflaws = new  ArrayList<StaticAnalysisFlaw>();
		}
	
    	return this.staticflaws;
	}

	@Override
	public List<DynamicAnalysisFlawFind> getDynamicAnalysisFlaws() {
		if(this.dynamicflaws == null) {
			this.dynamicflaws = new  ArrayList<DynamicAnalysisFlawFind>();
		}
	
    	return this.dynamicflaws;
	}

	@Override
	public List<ManualAnalysisFlawFind> getManualAnalysisFlaws() {
		if(this.manualflaws == null) {
			this.manualflaws = new  ArrayList<ManualAnalysisFlawFind>();
		}
	
    	return this.manualflaws;
	}
}
