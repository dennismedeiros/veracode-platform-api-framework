<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance" xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" account_id="32818" app_name="WebGoat 6.0" app_id="205537" analysis_id="3345490" static_analysis_unit_id="3361229" sandbox_id="219769" first_build_submitted_date="2015-12-18 13&#x3a;10&#x3a;50 UTC" version="3 Jan 2019 Static" build_id="3359624" submitter="Dennis Medeiros" platform="Not Specified" assurance_level="4" business_criticality="4" generation_date="2020-04-15 19&#x3a;47&#x3a;46 UTC" veracode_level="VL3 &#x2b; SCA" total_flaws="3" flaws_not_mitigated="3" teams="" life_cycle_stage="Internal or Alpha Testing" planned_deployment_date="2015-12-18 13&#x3a;02&#x3a;48 UTC" last_update_time="2019-01-03 14&#x3a;41&#x3a;18 UTC" is_latest_build="false" policy_name="Veracode Recommended High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="true" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false"><static-analysis rating="A" score="99" submitted_date="2019-01-03 14&#x3a;39&#x3a;21 UTC" published_date="2019-01-03 14&#x3a;41&#x3a;09 UTC" version="3 Jan 2019 Static" next_scan_due="2019-04-03 13&#x3a;41&#x3a;09 UTC" analysis_size_bytes="13461" engine_version="128691">
      <modules>
         <module name="webgoat-container-v8.0.0.SNAPSHOT.jar" compiler="JAVAC_8" os="Java J2SE 8" architecture="JVM" loc="2553" score="99" numflawssev0="0" numflawssev1="0" numflawssev2="1" numflawssev3="2" numflawssev4="0" numflawssev5="0"/>
      </modules>
   </static-analysis>
   <severity level="5">
      <category categoryid="18" categoryname="OS Command Injection" pcirelated="false">
         <desc>
            <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
         </desc>
         <recommendations>
            <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
               <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
            </para>
         </recommendations>
         <cwe cweid="78" cwename="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864" certc="1165" certcpp="875" certjava="1134">
            <description>
               <text text="This call contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="337" module="WebGoat-6.0.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using user-supplied input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data from the variable command. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="2" categoryid="18" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ccp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="accepted" mitigation_status_desc="Mitigation Accepted" sourcefile="Exec.java" line="107" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;util&#x2f;" scope="org.owasp.webgoat.util.Exec" functionprototype="ExecResults execOptions&#x28;java.lang.String  &#x5b;&#x5d;, java.lang.String, int, int, boolean&#x29;" functionrelativelocation="10">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="204" module="WebGoat-6.0.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using user-supplied input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data from the variable command. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="2" categoryid="18" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ccp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="accepted" mitigation_status_desc="Mitigation Accepted" sourcefile="Exec.java" line="289" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;util&#x2f;" scope="org.owasp.webgoat.util.Exec" functionprototype="ExecResults execOptions&#x28;java.lang.String, java.lang.String, int, int, boolean&#x29;" functionrelativelocation="9">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="false">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded &#x28;&#x25;xx&#x29;, HTML-encoded &#x28;&#x26;&#x23;xx&#x3b;&#x29;, or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="112" module="WebGoat-6.0.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable arrSQL. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="proposed" mitigation_status_desc="Mitigation Proposed" sourcefile="BackDoors.java" line="141" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BackDoors" functionprototype="apache.ecs.Element concept1&#x28;session.WebSession&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="188" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable arrSQL. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BackDoors.java" line="148" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BackDoors" functionprototype="apache.ecs.Element concept1&#x28;session.WebSession&#x29;" functionrelativelocation="81">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="315" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable arrSQL. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BackDoors.java" line="180" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BackDoors" functionprototype="apache.ecs.Element concept2&#x28;session.WebSession&#x29;" functionrelativelocation="91">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="362" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlindNumericSqlInjection.java" line="114" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BlindNumericSqlInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="68">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="361" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlindStringSqlInjection.java" line="114" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BlindStringSqlInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="63">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="241" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Challenge2Screen.java" line="221" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Challenge2Screen" functionprototype="apache.ecs.Element doStage2&#x28;session.WebSession&#x29;" functionrelativelocation="30">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="252" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DOS_Login.java" line="106" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.DOS_Login" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="26" module="WebGoat-6.0.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable insertData1. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="proposed" mitigation_status_desc="Mitigation Proposed" sourcefile="DOS_Login.java" line="122" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.DOS_Login" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="46">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="214" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="127" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="org.owasp.webgoat.lessons.GoatHillsFinancial.Login" functionprototype="boolean login&#x28;session.WebSession, int, java.lang.String&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="254" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="131" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="org.owasp.webgoat.lessons.SQLInjection.Login" functionprototype="boolean login&#x28;session.WebSession, java.lang.String, java.lang.String&#x29;" functionrelativelocation="36">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="163" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="166" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="org.owasp.webgoat.lessons.SQLInjection.Login" functionprototype="boolean login_BACKUP&#x28;session.WebSession, java.lang.String, java.lang.String&#x29;" functionrelativelocation="36">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="312" module="WebGoat-6.0.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlAddData.java" line="100" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SqlAddData" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="39">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="100" module="WebGoat-6.0.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="proposed" mitigation_status_desc="Mitigation Proposed" sourcefile="SqlModifyData.java" line="108" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SqlModifyData" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="289" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlNumericInjection.java" line="119" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SqlNumericInjection" functionprototype="apache.ecs.Element injectableQuery&#x28;session.WebSession&#x29;" functionrelativelocation="39">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="357" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlStringInjection.java" line="101" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SqlStringInjection" functionprototype="apache.ecs.Element injectableQuery&#x28;session.WebSession&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="200" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThreadSafetyProblem.java" line="98" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.ThreadSafetyProblem" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="51">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="303" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlStatement. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewDatabase.java" line="82" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;admin&#x2f;" scope="org.owasp.webgoat.lessons.admin.ViewDatabase" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="58">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="162" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile.java" line="108" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="org.owasp.webgoat.lessons.SQLInjection.ViewProfile" functionprototype="session.Employee getEmployeeProfile&#x28;session.WebSession, java.lang.String, java.lang.String&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="213" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile.java" line="157" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="org.owasp.webgoat.lessons.SQLInjection.ViewProfile" functionprototype="session.Employee getEmployeeProfile_BACKUP&#x28;session.WebSession, java.lang.String, java.lang.String&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="193" module="WebGoat-6.0.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, and javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WsSqlInjection.java" line="233" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.WsSqlInjection" functionprototype="java.sql.ResultSet getResults&#x28;java.lang.String&#x29;" functionrelativelocation="80">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
         <desc>
            <para text="The acronym CRLF stands for &#x22;Carriage Return, Line Feed&#x22; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
         </desc>
         <recommendations>
            <para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
         </recommendations>
         <cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="1027" certjava="1134">
            <description>
               <text text="A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="377" module="webgoat-container-v8.0.0.SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug&#x28;&#x29; contains tainted data from the variable locale. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2019-01-03 14&#x3a;33&#x3a;10 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2019-01-03 14&#x3a;41&#x3a;09 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LabelService.java" line="85" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;service&#x2f;" scope="org.owasp.webgoat.service.LabelService" functionprototype="springframework.http.ResponseEntity fetchLabels&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="378" module="webgoat-container-v8.0.0.SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug&#x28;&#x29; contains tainted data from the variable lang. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2019-01-03 14&#x3a;33&#x3a;10 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2019-01-03 14&#x3a;41&#x3a;09 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LabelService.java" line="85" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;service&#x2f;" scope="org.owasp.webgoat.service.LabelService" functionprototype="springframework.http.ResponseEntity fetchLabels&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="2" module="WebGoat-6.0.war" type="javax.servlet.GenericServlet.log" description="This call to javax.servlet.GenericServlet.log&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to log&#x28;&#x29; contains tainted data from the variable output. The tainted data originated from earlier calls to javax.servlet.servletrequest.getremotehost, javax.servlet.servletrequest.getparameternames, and javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HammerHead.java" line="271" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;" scope="org.owasp.webgoat.HammerHead" functionprototype="void log&#x28;javax.servlet.http.HttpServletRequest, java.lang.String&#x29;" functionrelativelocation="84"/>
            </staticflaws>
         </cwe>
         <cwe cweid="93" cwename="Improper Neutralization of CRLF Sequences &#x28;&#x27;CRLF Injection&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains a CRLF Injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF &#x28;carriage return line feed&#x29; sequence as a delimiter to separate lines or records can result in that data being misinterpreted.  FTP and SMTP are examples of protocols that treat CRLF as a delimiter when parsing commands."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences &#x28;&#x27;CRLF Injection&#x27;&#x29;" count="1" issueid="305" module="WebGoat-6.0.war" type="javax.mail.Message.setRecipients" description="This call to javax.mail.Message.setRecipients&#x28;&#x29; contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF &#x28;carriage return line feed&#x29; sequence as a delimiter to separate lines or records can result in that data being misinterpreted. setRecipients&#x28;&#x29; was called on the msg object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Sanitize CRLF sequences from user-supplied input.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;93.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;CRLF_Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UncheckedEmail.java" line="364" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.UncheckedEmail" functionprototype="javax.mail.Message sendGoogleMail&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="86"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences &#x28;&#x27;CRLF Injection&#x27;&#x29;" count="1" issueid="240" module="WebGoat-6.0.war" type="javax.mail.Message.setSubject" description="This call to javax.mail.Message.setSubject&#x28;&#x29; contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF &#x28;carriage return line feed&#x29; sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject&#x28;&#x29; contains tainted data from the variable subject. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Sanitize CRLF sequences from user-supplied input.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;93.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;CRLF_Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UncheckedEmail.java" line="367" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.UncheckedEmail" functionprototype="javax.mail.Message sendGoogleMail&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="89"/>
            </staticflaws>
         </cwe>
         <cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="18" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to sendRedirect&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="config_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;ConfManagement&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.ConfManagement.config_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="189" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader&#x28;&#x29; contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The second argument to setHeader&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HttpOnly.java" line="215" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.HttpOnly" functionprototype="void setHttpOnly&#x28;session.WebSession&#x29;" functionrelativelocation="89"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="46" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader&#x28;&#x29; contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The second argument to setHeader&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HttpOnly.java" line="233" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.HttpOnly" functionprototype="void removeHttpOnly&#x28;session.WebSession&#x29;" functionrelativelocation="89"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="4" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to sendRedirect&#x28;&#x29; contains tainted data from the variable request.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="redirect_jsp.java" line="63" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;General&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.General.redirect_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="31" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable cookies. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebSession.java" line="276" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.WebSession" functionprototype="void eatCookies&#x28;&#x29;" functionrelativelocation="79"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="489" cwename="Active Debug Code" pcirelated="false">
            <description>
               <text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main&#x28;&#x29; method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Active Debug Code" count="1" issueid="341" module="WebGoat-6.0.war" type="main" description="The main&#x28;&#x29; method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main&#x28;&#x29; method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.&#xd;&#xa;&#xd;&#xa;Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;489.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Encoding.java" line="559" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Active Debug Code" count="1" issueid="54" module="WebGoat-6.0.war" type="main" description="The main&#x28;&#x29; method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main&#x28;&#x29; method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.&#xd;&#xa;&#xd;&#xa;Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;489.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Exec.java" line="496" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;util&#x2f;" scope="org.owasp.webgoat.util.Exec" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Active Debug Code" count="1" issueid="313" module="WebGoat-6.0.war" type="main" description="The main&#x28;&#x29; method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main&#x28;&#x29; method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.&#xd;&#xa;&#xd;&#xa;Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;489.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebgoatProperties.java" line="111" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.WebgoatProperties" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="10" categoryname="Credentials Management" pcirelated="false">
         <desc>
            <para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project&#x27;s developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
            <para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &#x22;secret,&#x22; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
         </desc>
         <recommendations>
            <para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
         </recommendations>
         <cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true" owasp="1028" sans="798" certjava="1152">
            <description>
               <text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="61" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Challenge2Screen.java" line="11" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="107" module="WebGoat-6.0.war" type="PASSED initializer" description="The PASSED initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DangerousEval.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="293" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DOS_Login.java" line="2" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="153" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ECSFactory.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="87" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GoatHillsFinancial.java" line="18" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="37" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HtmlClues.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="211" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="InsecureLogin.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="187" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LogSpoofing.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="78" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MultiLevelLogin1.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="278" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MultiLevelLogin2.java" line="3" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="265" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SessionFixation.java" line="7" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="67" module="WebGoat-6.0.war" type="YOUR_REAL_GMAIL_PASSWORD initializer" description="The YOUR_REAL_GMAIL_PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UncheckedEmail.java" line="2" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="335" module="WebGoat-6.0.war" type="GMAIL_PASS initializer" description="The GMAIL_PASS initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UncheckedEmail.java" line="8" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="55" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakAuthenticationCookie.java" line="5" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="338" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakSessionID.java" line="4" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="267" module="WebGoat-6.0.war" type="DATABASE_PASSWORD initializer" description="The DATABASE_PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebgoatContext.java" line="5" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="239" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WsSAXInjection.java" line="2" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="277" module="WebGoat-6.0.war" type="PASSWORD initializer" description="The PASSWORD initializer&#x28;&#x29; method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XPATHInjection.java" line="4" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
            </staticflaws>
         </cwe>
         <cwe cweid="555" cwename="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" pcirelated="true" owasp="1028">
            <description>
               <text text="The J2EE application stores a plaintext password in a configuration file, which allows anyone with access to the file the ability to access the password-protected resource."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="334" module="WebGoat-6.0.war" type="lesson.CsrfPromptByPass.ranking" description="The application appears to be storing plaintext credential data, &#x3f;, in a properties file named lesson.CsrfPromptByPass.ranking. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-class.properties" line="19" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-class.webgoat-class" functionprototype="void webgoat-class&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="290" module="WebGoat-6.0.war" type="lesson.CsrfTokenByPass.ranking" description="The application appears to be storing plaintext credential data, &#x3f;, in a properties file named lesson.CsrfTokenByPass.ranking. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-class.properties" line="20" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-class.webgoat-class" functionprototype="void webgoat-class&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="52" module="WebGoat-6.0.war" type="lesson.ForgotPassword.hidden" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;, in a properties file named lesson.ForgotPassword.hidden. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-class.properties" line="57" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-class.webgoat-class" functionprototype="void webgoat-class&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="360" module="WebGoat-6.0.war" type="lesson.CsrfPromptByPass.ranking" description="The application appears to be storing plaintext credential data, &#x3f;, in a properties file named lesson.CsrfPromptByPass.ranking. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-lab.properties" line="18" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-lab.webgoat-lab" functionprototype="void webgoat-lab&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="170" module="WebGoat-6.0.war" type="lesson.CsrfTokenByPass.ranking" description="The application appears to be storing plaintext credential data, &#x3f;, in a properties file named lesson.CsrfTokenByPass.ranking. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-lab.properties" line="19" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-lab.webgoat-lab" functionprototype="void webgoat-lab&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="332" module="WebGoat-6.0.war" type="lesson.ForgotPassword.hidden" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;, in a properties file named lesson.ForgotPassword.hidden. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat-lab.properties" line="54" sourcefilepath="WEB-INF&#x2f;" scope="webgoat-lab.webgoat-lab" functionprototype="void webgoat-lab&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="274" module="WebGoat-6.0.war" type="InvalidUsernameAndPassword" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named InvalidUsernameAndPassword. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="43" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="23" module="WebGoat-6.0.war" type="Password" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named Password. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="45" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="329" module="WebGoat-6.0.war" type="PasswordForgotten" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named PasswordForgotten. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="50" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="70" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint1" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint1. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="221" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="113" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint2" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint2. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="222" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="287" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint3" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint3. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_english.properties" line="223" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_english.WebGoatLabels_english" functionprototype="void WebGoatLabels_english&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="15" module="WebGoat-6.0.war" type="InvalidUsernameAndPassword" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named InvalidUsernameAndPassword. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_german.properties" line="43" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_german.WebGoatLabels_german" functionprototype="void WebGoatLabels_german&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="276" module="WebGoat-6.0.war" type="Password" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named Password. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_german.properties" line="45" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_german.WebGoatLabels_german" functionprototype="void WebGoatLabels_german&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="29" module="WebGoat-6.0.war" type="PasswordForgotten" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named PasswordForgotten. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_german.properties" line="50" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_german.WebGoatLabels_german" functionprototype="void WebGoatLabels_german&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="309" module="WebGoat-6.0.war" type="InvalidUsernameAndPassword" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named InvalidUsernameAndPassword. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="43" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="62" module="WebGoat-6.0.war" type="Password" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named Password. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="45" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="134" module="WebGoat-6.0.war" type="PasswordForgotten" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named PasswordForgotten. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="50" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="256" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint1" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint1. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="221" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="206" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint2" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint2. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="222" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="J2EE Misconfiguration&#x3a; Plaintext Password in Configuration File" count="1" issueid="210" module="WebGoat-6.0.war" type="BypassHtmlFieldRestrictionsHint3" description="The application appears to be storing plaintext credential data, &#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;&#x3f;, in a properties file named BypassHtmlFieldRestrictionsHint3. Storing a plaintext password in a configuration file allows anyone with access to the file the ability to access the password-protected resource, making it an easy target for attackers.&#xd;&#xa;&#xd;&#xa;Ensure that there is no sensitive data stored in properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;555.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="555" remediationeffort="3" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebGoatLabels_russian.properties" line="223" sourcefilepath="WEB-INF&#x2f;classes&#x2f;" scope="WebGoatLabels_russian.WebGoatLabels_russian" functionprototype="void WebGoatLabels_russian&#x28;void&#x29;" functionrelativelocation="-1"/>
            </staticflaws>
         </cwe>
         <cwe cweid="256" cwename="Unprotected Storage of Credentials" pcirelated="true" owasp="1028">
            <description>
               <text text="A method reads and&#x2f;or stores sensitive information in plaintext, making the data more susceptible to compromise."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Unprotected Storage of Credentials" count="1" issueid="102" module="WebGoat-6.0.war" type="java.sql.DriverManager.getConnection" description="The java.sql.DriverManager.getConnection&#x28;&#x29; method reads and&#x2f;or stores sensitive information in plaintext, making the data more susceptible to compromise.&#xd;&#xa;&#xd;&#xa;Never store sensitive data in plaintext. Consider using cryptographic hashes as an alternative to plaintext. The third argument to getConnection&#x28;&#x29; contains data from server-side storage from the variable password. The data from server-side storage originated from an earlier call to javax.servlet.genericservlet.getinitparameter.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;256.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="256" remediationeffort="4" exploitLevel="0" categoryid="10" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseUtilities.java" line="100" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection makeConnection&#x28;java.lang.String, WebgoatContext&#x29;" functionrelativelocation="63"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="false">
         <desc>
            <para text="Cross-site scripting &#x28;XSS&#x29; attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient &#x28;often referred to as stored and reflected, respectively&#x29;.  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient&#x3b; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code &#x28;a common technique in Web 2.0 applications&#x29;, additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" pcirelated="true" owasp="1033" sans="79">
            <description>
               <text text="This call contains a cross-site scripting &#x28;XSS&#x29; flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="368" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="49" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="21" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="196" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="217" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="9" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="151" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="222" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="262" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="173" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="219" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="366" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="371" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="195" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="197" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="69" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="72" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="36" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="119" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="369" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="261" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="125" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="229" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="352" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="150" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="56" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="57" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="269" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="135" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="212" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="89" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="373" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="127" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="60" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="310" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="66" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="157" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="30" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="32" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="144" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="288" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="5" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="45" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="123" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="343" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="136" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="73" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="216" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="51" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="90" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="39">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="263" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="266" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="74" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="39">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="179" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="333" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="346" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="59" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="166" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="105" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="42" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="110" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="296" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="156" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="194" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="354" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="109" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="83" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="118" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="182" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="122" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="117" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="122" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="322" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="126" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="44" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="126" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="275" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="133" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="103" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="133" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="114" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="133" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="181" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="133" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="47" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="139" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="22" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="139" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="129" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="139" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="115" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="139" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="230" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="141" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="20" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="141" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="126" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="143" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="75">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="349" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="143" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="75">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="319" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="143" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="75">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="291" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="143" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="75">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="118" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="122" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="301" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="91" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="234" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="81" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getTitle&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EditProfile_jsp.java" line="153" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.EditProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="120" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error_jsp.java" line="71" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.error_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="138" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error_jsp.java" line="71" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.error_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="326" module="WebGoat-6.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable field1. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="eval_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;Ajax&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.Ajax.eval_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="174" module="WebGoat-6.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variables field2, and field1. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="eval_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;Ajax&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.Ajax.eval_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="124" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getRestartLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="genericLesson_jsp.java" line="102" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;layouts&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.layouts.genericLesson_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="317" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable p.getName&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameternames. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="hintsParamsAndCookies_jsp.java" line="89" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.hintsParamsAndCookies_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="96" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable c.getName&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="hintsParamsAndCookies_jsp.java" line="108" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.hintsParamsAndCookies_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="172" module="WebGoat-6.0.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable s. The tainted data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, javax.servlet.servletrequest.getparameterjava.lang.system.getproperty, and java.lang.system.getenv. The tainted data is directed into an output stream returned by javax.servlet.servletresponse.getwriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LessonSource.java" line="203" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;" scope="org.owasp.webgoat.LessonSource" functionprototype="void writeSource&#x28;java.lang.String, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="154" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="302" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="161" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="208" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="3" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="8" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="298" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="155" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="339" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="169" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="139" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="76" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="186" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="345" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="167" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="355" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="325" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="330" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="264" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="308" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="244" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="245" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="116" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="220" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListStaff_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ListStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="225" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="350" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="321" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="331" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="1" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="12" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="70" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="185" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="372" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="198" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="238" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="273" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="71" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variables stub.getRole&#x28;&#x29;, and stub.getLastName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.Login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="132" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable lesson.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="171" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="97" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="185" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="247" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="238" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="43" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="240" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="180" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="242" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="27" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="246" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="270" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="248" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="147" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="250" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="104" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getRestartLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="266" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="68">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="249" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data from the variable printParameters. The tainted data originated from earlier calls to javax.servlet.servletrequest.getparameternames, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="289" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="140" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data from the variable printCookies. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="300" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="82">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="363" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable currentLesson.getLessonPlan&#x28;&#x29;. The tainted data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, javax.servlet.servletrequest.getparametervaluesjava.lang.system.getenv, and java.lang.system.getproperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="304" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="367" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getMessage&#x28;&#x29;. The tainted data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="320" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="89">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="158" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable lesson.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="169" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="259" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="183" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="7" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="234" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="81">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="280" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="236" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="82">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="237" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="238" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="143" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="242" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="86">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="19" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="244" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="284" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getLink&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="menu_jsp.java" line="246" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;WEB_002dINF&#x2f;pages&#x2f;sections&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.WEB_002dINF.pages.sections.menu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="89">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="235" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The tainted data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="reportBug_jsp.java" line="73" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.reportBug_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="121" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The tainted data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="reportBug_jsp.java" line="77" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.reportBug_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="95" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="233" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="164" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="353" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="250" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="6" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="231" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="271" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="145" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="328" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="364" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="295" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SearchStaff_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.SearchStaff_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="199" module="WebGoat-6.0.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable result. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SilentTransactions.java" line="89" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SilentTransactions" functionprototype="void handleRequest&#x28;session.WebSession&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="14" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="71" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="84" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="48" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="16">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="108" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="111" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="183" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getUserNameInLesson&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="72" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="281" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="73" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="88" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="342" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="159" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="304" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="142" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getFirstName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="74" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="258" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="75" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="227" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="76" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="94" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="76" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="101" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="76" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="175" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="76" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="365" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getLastName&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="76" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="242" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="77" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="131" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="311" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="28" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="168" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="39" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress1&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="78" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="13" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="79" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="257" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="80" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="92" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="80" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="347" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="80" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="176" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="80" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="248" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getAddress2&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="80" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="160" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="81" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="50" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="340" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="246" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="283" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="253" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPhoneNumber&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="82" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="34" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="83" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="85" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="84" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="128" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="84" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="279" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="84" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="327" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="84" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="17" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getStartDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="84" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="75" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="85" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="192" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="272" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="133" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="33" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="41" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getSsn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="86" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="177" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="89" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="297" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="236" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="243" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="356" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="178" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getCcn&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="90" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="25" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="93" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="226" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="190" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="98" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="251" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getPersonalDescription&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="184" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable lesson.htmlEncode&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, javax.servlet.servletrequest.getparametervalues, and javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="94" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="232" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="351" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="285" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="97" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="24" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="348" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="320" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="359" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="40" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionNotes&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="98" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="82" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="99" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="130" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="100" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="46">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="106" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="100" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="46">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="255" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable employee.getDisciplinaryActionDate&#x28;&#x29;. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="100" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="86" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="106" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="300" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="107" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="65" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="107" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="35" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="107" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="146" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="107" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="218" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="107" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="370" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="123" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="202" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="123" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="221" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="123" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="224" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="124" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="316" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="124" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="10" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="124" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="141" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="140" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.GoatHillsFinancial.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="286" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="140" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBCrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBCrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="149" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="140" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;RoleBasedAccessControl&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.RoleBasedAccessControl.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="165" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="141" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;CrossSiteScripting&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="323" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="141" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;DBSQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.DBSQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="215" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getCurrentLesson&#x28;&#x29;.getFormAction&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ViewProfile_jsp.java" line="141" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;SQLInjection&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.SQLInjection.ViewProfile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="205" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The tainted data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat_005fchallenge_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.webgoat_005fchallenge_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="228" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The tainted data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;auth&#x2f;helpCenter&#x2f;review&#x2f;review_cleansers.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.webgoat_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="326" cwename="Inadequate Encryption Strength" pcirelated="true" owasp="1029" sans="327">
            <description>
               <text text="Insufficiently strong encryption schemes may not adequately secure secret data from attackers. This can result from poor cipher selection, insufficient key size, or weak key selection."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Inadequate Encryption Strength" count="1" issueid="203" module="WebGoat-6.0.war" type="javax.crypto.spec.PBEParameterSpec.&#x21;operator_javanewinit" description="This call to javax.crypto.spec.PBEParameterSpec.&#x21;operator_javanewinit&#x28;&#x29; uses fewer than 1000 iterations for PBE key generation. RFC 2898 recommends at least 1000 iterations because a higher iteration count increases the computational cost of a dictionary attack.&#xd;&#xa;&#xd;&#xa;Use a minimum of 1000 iterations.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;326.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="326" remediationeffort="2" exploitLevel="2" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Encoding.java" line="321" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String decryptString&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="2">
                        <note>The encryption scheme used here is using a 56-bit keysize.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Inadequate Encryption Strength" count="1" issueid="171" module="WebGoat-6.0.war" type="javax.crypto.spec.PBEParameterSpec.&#x21;operator_javanewinit" description="This call to javax.crypto.spec.PBEParameterSpec.&#x21;operator_javanewinit&#x28;&#x29; uses fewer than 1000 iterations for PBE key generation. RFC 2898 recommends at least 1000 iterations because a higher iteration count increases the computational cost of a dictionary attack.&#xd;&#xa;&#xd;&#xa;Use a minimum of 1000 iterations.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;326.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="326" remediationeffort="2" exploitLevel="2" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Encoding.java" line="366" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String encryptString&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="13">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="2">
                        <note>The encryption scheme used here is using a 56-bit keysize.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
         <cwe cweid="327" cwename="Use of a Broken or Risky Cryptographic Algorithm" pcirelated="true" owasp="1029" sans="866" certc="1170" certcpp="883" certjava="1152">
            <description>
               <text text="The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the disclosure of sensitive information."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="137" module="WebGoat-6.0.war" type="java.security.MessageDigest.getInstance" description="This function uses the java.security.MessageDigest.getInstance&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Encoding.java" line="465" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String hashMD5&#x28;java.lang.String&#x29;" functionrelativelocation="35"/>
            </staticflaws>
         </cwe>
         <cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327" certc="1170">
            <description>
               <text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="16" module="WebGoat-6.0.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SessionFixation.java" line="797" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SessionFixation" functionprototype="java.lang.String randomSIDGenerator&#x28;&#x29;" functionrelativelocation="85"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="344" module="WebGoat-6.0.war" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakSessionID.java" line="77" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.WeakSessionID" functionprototype="void &#x3c;clinit&#x3e;&#x28;void&#x29;" functionrelativelocation="75"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
         <desc>
            <para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
            <para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal &#x28;or directory traversal&#x29; vulnerability may occur.  For example, an attacker could specify a filename such as &#x22;..&#x2f;..&#x2f;etc&#x2f;passwd&#x22;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
         </desc>
         <recommendations>
            <para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
         </recommendations>
         <cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
            <description>
               <text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="282" module="WebGoat-6.0.war" type="java.io.FileReader.&#x21;operator_javanewinit" description="This call to java.io.FileReader.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable s.getWebResource&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AbstractLesson.java" line="511" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.AbstractLesson" functionprototype="java.lang.String getSource&#x28;session.WebSession&#x29;" functionrelativelocation="16">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="306" module="WebGoat-6.0.war" type="java.io.FileReader.&#x21;operator_javanewinit" description="This call to java.io.FileReader.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable s.getWebResource&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AbstractLesson.java" line="551" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.AbstractLesson" functionprototype="java.lang.String getSolution&#x28;session.WebSession&#x29;" functionrelativelocation="24">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="260" module="WebGoat-6.0.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable helpFile. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommandInjection.java" line="143" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.CommandInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="69">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="191" module="WebGoat-6.0.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable helpFile. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommandInjection.java" line="150" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.CommandInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="81">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="336" module="WebGoat-6.0.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable file. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PathBasedAccessControl.java" line="129" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.PathBasedAccessControl" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="40">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="-1">
                        <note>The source of the tainted data in this web application flaw is not a web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="22" categoryname="Encapsulation" pcirelated="false">
         <desc>
            <para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user&#x27;s data and another&#x27;s.  "/>
            <para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
         </desc>
         <recommendations>
            <para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="501" cwename="Trust Boundary Violation" pcirelated="false">
            <description>
               <text text="A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted.  This application mixes trusted and untrusted data in the same data structure.  By doing so, it becomes easier for programmers to mistakenly trust unvalidated data.  Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.  A common manifestation of this flaw is in J2EE application, when a Session object is used to store untrusted data from the HTTP request."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="79" module="WebGoat-6.0.war" type="javax.servlet.http.HttpSession.setAttribute" description="This call to javax.servlet.http.HttpSession.setAttribute&#x28;&#x29; mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The second argument to setAttribute&#x28;&#x29; contains tainted data from the variable value. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;501.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DefaultLessonAction.java" line="89" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;GoatHillsFinancial&#x2f;" scope="org.owasp.webgoat.lessons.GoatHillsFinancial.DefaultLessonAction" functionprototype="void setSessionAttribute&#x28;session.WebSession, java.lang.String, java.lang.Object&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="201" module="WebGoat-6.0.war" type="span.set" description="This call to span.set&#x28;&#x29; mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;501.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HammerHead.java" line="182" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;" scope="org.owasp.webgoat.HammerHead" functionprototype="void doPost&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
         <desc>
            <para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
         </desc>
         <recommendations>
            <para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
            <para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
         </recommendations>
         <cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" pcirelated="false">
            <description>
               <text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="1" issueid="11" module="WebGoat-6.0.war" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable clazz. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlindScript.java" line="243" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BlindScript" functionprototype="java.lang.String loadMe&#x28;session.WebSession, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="2">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>The class name being passed to the reflection operation is tainted.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="1" issueid="318" module="WebGoat-6.0.war" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable context.getDatabaseDriver&#x28;&#x29;. The tainted data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseUtilities.java" line="93" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection makeConnection&#x28;java.lang.String, WebgoatContext&#x29;" functionrelativelocation="3">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>The class name being passed to the reflection operation is tainted.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
         <cwe cweid="601" cwename="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" pcirelated="false" sans="864">
            <description>
               <text text="A web application accepts a untrusted input that specifies a link to an external site, and uses that link to generate a redirect.  This enables phishing attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="209" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to sendRedirect&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Open_redirect&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="config_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;ConfManagement&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.ConfManagement.config_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="324" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to sendRedirect&#x28;&#x29; contains tainted data from the variable request.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Open_redirect&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="redirect_jsp.java" line="63" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;lessons&#x2f;General&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.lessons.General.redirect_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir&#x28;&#x29; after calling chroot&#x28;&#x29;, it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf&#x28;&#x29; also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee&#x27;s behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices&#x3a; Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container&#x27;s resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="268" module="WebGoat-6.0.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseUtilities.java" line="100" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection makeConnection&#x28;java.lang.String, WebgoatContext&#x29;" functionrelativelocation="63"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="152" module="WebGoat-6.0.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseUtilities.java" line="112" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection getHsqldbConnection&#x28;java.lang.String, WebgoatContext&#x29;" functionrelativelocation="95"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="1162" certcpp="876" certjava="1147">
            <description>
               <text text="The application fails to release &#x28;or incorrectly releases&#x29; a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="110" module="WebGoat-6.0.war" type="java.sql.Connection.createStatement" description="There are total of 129 instances. The program fails to release or incorrectly releases some variables, e.g. the variable target_statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlAddData.java" line="87" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.SqlAddData" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="17"/>
            </staticflaws>
         </cwe>
         <cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false" certjava="1136">
            <description>
               <text text="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality or &#x27;&#x21;&#x3d;&#x27; for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="314" module="WebGoat-6.0.war" type="span.neq" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakAuthenticationCookie.java" line="142" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.WeakAuthenticationCookie" functionprototype="java.lang.String checkParams&#x28;session.WebSession&#x29;" functionrelativelocation="67"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="307" module="WebGoat-6.0.war" type="span.neq" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLInjection.java" line="234" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="85"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="223" module="WebGoat-6.0.war" type="span.neq" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLInjection.java" line="236" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="86"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="207" module="WebGoat-6.0.war" type="span.neq" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLInjection.java" line="246" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent&#x28;session.WebSession&#x29;" functionrelativelocation="93"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" pcirelated="true" owasp="1029" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as a TLS connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information &#x28;e.g. &#x22;remember me&#x22; style functionality&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="77" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Challenge2Screen.java" line="172" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Challenge2Screen" functionprototype="apache.ecs.Element doStage1&#x28;session.WebSession&#x29;" functionrelativelocation="75"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="58" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Challenge2Screen.java" line="195" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Challenge2Screen" functionprototype="apache.ecs.Element doStage2&#x28;session.WebSession&#x29;" functionrelativelocation="4"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="93" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakAuthenticationCookie.java" line="146" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.WeakAuthenticationCookie" functionprototype="java.lang.String checkParams&#x28;session.WebSession&#x29;" functionrelativelocation="88"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="38" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeakSessionID.java" line="200" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.WeakSessionID" functionprototype="apache.ecs.Element makeLogin&#x28;session.WebSession&#x29;" functionrelativelocation="8"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="80" module="WebGoat-6.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebSession.java" line="276" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;session&#x2f;" scope="org.owasp.webgoat.session.WebSession" functionprototype="void eatCookies&#x28;&#x29;" functionrelativelocation="79"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="209" cwename="Generation of Error Message Containing Sensitive Information" pcirelated="true" owasp="1032" certcpp="880">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own &#x28;such as a password&#x29;, or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="379" module="webgoat-container-v8.0.0.SNAPSHOT.jar" type="javax.servlet.http.HttpServletResponse.sendError" description="The application calls the javax.servlet.http.HttpServletResponse.sendError&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The second argument to sendError&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable authException.getMessage&#x28;&#x29;. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.throwable.getmessage.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2019-01-03 14&#x3a;33&#x3a;10 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AjaxAuthenticationEntryPoint.java" line="53" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;" scope="org.owasp.webgoat.AjaxAuthenticationEntryPoint" functionprototype="void commence&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, springframework.security.core.AuthenticationException&#x29;" functionrelativelocation="54"/>
            </staticflaws>
         </cwe>
         <cwe cweid="201" cwename="Exposure of Sensitive Information Through Sent Data" pcirelated="false">
            <description>
               <text text="Sensitive information may be exposed as a result of outbound network connections made by the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="299" module="WebGoat-6.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to write&#x28;&#x29; contains potentially sensitive data from the variable browserFiles. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by java.net.urlconnection.getoutputstream.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlindScript.java" line="179" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.BlindScript" functionprototype="void executeSpyWare&#x28;session.WebSession&#x29;" functionrelativelocation="75"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="358" module="WebGoat-6.0.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable jsonStr. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JSONInjection.java" line="80" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.JSONInjection" functionprototype="void handleRequest&#x28;session.WebSession&#x29;" functionrelativelocation="68"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="99" module="WebGoat-6.0.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable s. The potentially sensitive data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, javax.servlet.servletrequest.getparameterjava.lang.system.getproperty, and java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getwriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LessonSource.java" line="203" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;" scope="org.owasp.webgoat.LessonSource" functionprototype="void writeSource&#x28;java.lang.String, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="148" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable currentLesson.getLessonPlan&#x28;&#x29;. The potentially sensitive data originated from earlier calls to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1, javax.servlet.servletrequest.getparametervaluesjava.lang.system.getenv, and java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="304" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="84"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="68" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable webSession.getInstructions&#x28;&#x29;. The potentially sensitive data originated from an earlier call to javax.servlet.servletcontext.getrealpath. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_jsp.java" line="318" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="294" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The potentially sensitive data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="reportBug_jsp.java" line="73" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.reportBug_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="53" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The potentially sensitive data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="reportBug_jsp.java" line="77" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.reportBug_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="63" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The potentially sensitive data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat_005fchallenge_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.webgoat_005fchallenge_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="374" module="WebGoat-6.0.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable webSession.getWebgoatContext&#x28;&#x29;.getFeedbackAddress&#x28;&#x29;. The potentially sensitive data originated from an earlier call to frameworkvirtualcontroller.vc_framework_entry_org_apache_axis1java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="webgoat_jsp.java" line="68" sourcefilepath="com&#x2f;veracode&#x2f;compiledjsp&#x2f;xWebGoat60war&#x2f;" scope="com.veracode.compiledjsp.xWebGoat60war.webgoat_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="292" module="WebGoat-6.0.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to print&#x28;&#x29; contains potentially sensitive data from the variable xmlStr. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLInjection.java" line="112" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="void handleRequest&#x28;session.WebSession&#x29;" functionrelativelocation="69"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="30" categoryname="Potential Backdoor" pcirelated="false">
         <desc>
            <para text="Application backdoors are modifications to programs that are designed to bypass security mechanisms or inject malicious functionality.  Backdoors are often inserted by rogue developers with legitimate access to the source code or distribution binaries.  Backdoors can take many forms, such as hard-coded credentials, &#x22;easter egg&#x22; style functionality, rootkits, or time bombs, among others."/>
         </desc>
         <recommendations>
            <para text="Investigate all potential backdoors thoroughly to ensure there is no undesirable functionality. If the backdoors are real, eliminate them, and initiate a broader effort to inspect the entire codebase for malicious code. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker."/>
         </recommendations>
         <cwe cweid="656" cwename="Reliance on Security Through Obscurity" pcirelated="false">
            <description>
               <text text="The strength of a security mechanism depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to allow the mechanism to be compromised."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Reliance on Security Through Obscurity" count="1" issueid="64" module="WebGoat-6.0.war" type="javax.crypto.Cipher.doFinal" description="The application decrypts or decodes embedded data. Encryption or encoding of embedded data is typically done to obfuscate the true intention of the data and to hinder reverse engineering efforts. javax.crypto.Cipher.doFinal&#xd;&#xa;&#xd;&#xa;This message is purely information and does not represent a flaw in the code. Therefore, no remediation is necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;656.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="656" remediationeffort="3" exploitLevel="0" categoryid="30" pcirelated="false" date_first_occurrence="2015-12-18 13&#x3a;02&#x3a;46 UTC" remediation_status="Fixed" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Encoding.java" line="335" sourcefilepath="org&#x2f;owasp&#x2f;webgoat&#x2f;lessons&#x2f;" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String decryptString&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="3" reopen="0" open="0" cannot-reproduce="0" fixed="373" total="3" not_mitigated="3" sev-1-change="0" sev-2-change="-21" sev-3-change="-327" sev-4-change="-20" sev-5-change="-2"/>
   <customfields>
      <customfield name="Custom 1" value=""/>
      <customfield name="Custom 2" value=""/>
      <customfield name="Custom 3" value=""/>
      <customfield name="Custom 4" value=""/>
      <customfield name="Custom 5" value=""/>
      <customfield name="Custom 6" value=""/>
      <customfield name="Custom 7" value=""/>
      <customfield name="Custom 8" value=""/>
      <customfield name="Custom 9" value=""/>
      <customfield name="Custom 10" value=""/>
   </customfields>
   <software_composition_analysis third_party_components="0" violate_policy="false" components_violated_policy="0">
      <vulnerable_components/>
   </software_composition_analysis>
</detailedreport>
